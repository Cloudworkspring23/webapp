# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Packer build CI

on:
  push:
    branches: ["main"]

jobs:
  packer:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy all files
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip webapp/

      - name: Delete copied files
        run: rm -rf webapp && ls -R

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ami.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: "packer validate -var 'ak=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'sk=${{ secrets.AWS_SECRET_ACCESS_KEY }}' --var-file=aws.pkvars.hcl ami.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: "packer build -var 'ak=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'sk=${{ secrets.AWS_SECRET_ACCESS_KEY }}' --var-file=aws.pkvars.hcl ami.pkr.hcl"
      
      - name: Configure AWS Credentials for Prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.AWS_REGION }}
      - name:  Run `Updating Launch Template with latest AMI id`
        id: updating 
        run: | 
          sudo apt-get install jq
          echo "Deploying Packer Build"
          ASG_NAME=${{ secrets.ASG_NAME }}
          LAUNCH_CONFIG=${{ secrets.LAUNCH_CONFIG }}
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')
          echo "$LAUNCH_CONFIG"
          echo "$IMAGE_ID"
          echo "$ASG_NAME"

          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"
          TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
            --filters="Name=is-default-version,Values=false" \
            --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)   
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION


      
      - name: Step 3 - Run `Instance Refresh ` 
        id: refreshing
        run: aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME
            printf "Instance refresh in progress"
            while true;
            do
              instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              printf "\nInstance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              printf "\nInstance refresh failed!"
              exit 1
            fi
            echo -ne "."
            sleep 10
          done  